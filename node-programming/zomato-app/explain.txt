express <========= REST API (json) ========> React APP
            REST API 
            API => application programming interface
            REST => representational state transfer

            SOAP => XML (Extensible Markup Language)
            REST ==> HTTP Protocol
            rest api ==> JSON , XML , Plan Text , HTML
                    server <=========> client


test api =>
        GET (cache of http) , POST (http body), PUT , DELETE
        manual testing api tool (POSTMAN application)

        GET => collect a data 
        POST => create (file upload) 
        PUT ==> update
        DELETE ==> delete

zomato application OUR API
    GET /location-list
    GET /restaurant-list
    GET /meal-type-list

MVC ==> 
Controller ==> handel functionality
Model ==> having a data or connected db operators
View (React JS) => HTML + CSS + JS(browser)

module ==> node js
model => db operators
modal ==> bootstrap pop-up

Till Now 
        How Create Express App
        How to create a api
        split application files like routs , controller
        create dummy data 
        read dummy data
        test api on postman
        work with dynamic URL 


        Connect our Express App with DB

We are use a database ==> mongoDB
database ==> store data 

SQL DB
        ==> SQL (Structure Query Language)
        ==> SQL DB ==> table structure
                DB ==> tables ==> rows ==> columns ==> data
        ==> Table Structure in rows 
        ==> SQL relational in nature
        ==> index to make quick search or to improve performance
        ==> before storing data you need schema
        ==> all data need to store same pattern
        ==> store large data we need large space 
                student
                        name , address , mobile
NoSQL
        ==> NoSQL (No Structure Query Language)
        ==> NoSQL DB ==> Collection Structure
                DB ==> Collection ==> Document ===> fields ==> data
        ==> Collection => document ==> {} (jsObject) ==> BSON (Binary JSON )
        ==> relational or non-relational in nature
        ==> index to make quick search or to improve performance
        ==> before storing data you don't need schema
        ==> all data need to store same/different pattern
        ==> store large amount data don't need more
                student
                        name
                        name , address
                        name , mobile
                        name , address , mobile

        https://www.mongodb.com/try/download/community
        https://www.mongodb.com/try/download/shell

************************ mongodb commands *******************
database (rack of books)
        show dbs
        use batch8thjan
        db ==> spacial object , handles all operators of data

collection (books)
        show collection
        db.createCollection('name')
        db.restaurant.drop()

document (pages in books) ==> {}
        save a record 
                {
                "city": "mumbai",
                "location": "central mumbai",
                "pinCode": 234567
                }

        # insert a single record
                db.locations.insertOne({
                        "city": "mumbai",
                        "location": "central mumbai",
                        "pinCode": 234567
                        })

        # read record
                db.location.find()

        # primary ==> unique & not a null
                _id: ObjectId("643bf3afff44e93b67bf4861")
                643bf3afff44e93b67bf4861 => 24 char => 12 byte

                643bf3af (4) ==> A 4-byte timestamp, representing the ObjectId's creation, measured in seconds since the Unix epoch.
                ff44e93b67 (5) ==> A 5-byte random value generated once per process. This random value is unique to the machine and process
                bf4861 (3) A 3-byte incrementing counter, initialized to a random value.

                4 + 5 + 3 => 12

# mongo Compass (GUI) ==> 
        #1 https://www.mongodb.com/try/download/compass
        #2 download compass
        #3 install compass
        #4 click new connection button
                mongodb://localhost:27017/

# mongoDB Mongoose
        mongoDB to Express
        mongoose 
                # helper lib for mongodb
                # mongoose works on promise
                # schema base lib
                # schema i.e logical structure
                        user (collection)
                                email : string , require
                                mobile :number , minLength:10
                                name : string

                                500 ==> 
                                email : string , require
                                mobile :number , minLength:10
                                name : string
                                dob : optional
                        this is a schema for user

        how to use it mongoose 
                #1 install mongoose
                #2 connection express (nodejs ) ==> mongoDB
                #3 create schema
                #4 read data form mongodb ==> postman

        mongoose is warper lib

# api Development 


# client ===> Request ===> server
# client <=== Response <=== server

        200 , 304 , 400, 401 , 403 , 404,  500, 502, 503 , 504

        200 - 299  valid response
        400 - 499 client error
        500 - 599 server error

yellow ==> stop wait go
red ==> stop
green ==> go

page one 
        GET /get-location-list
        GET /get-restaurant-list-by-location-id
        GET /get-meal-type

        login (social login)

page two 
        POST /filter (50%)
        

page three
        GET /get-restaurant-details-by-restaurant-id
        GET /get-menu-items-by-restaurant-id
        POST /payment
               POST/ save order

#* login (social login)

Location Controller
        ** GET /get-location-list

Restaurants Controller
        **GET /get-restaurant-list-by-location-id
        **GET /get-restaurant-details-by-restaurant-id
        **GET /get-menu-items-by-restaurant-id
        POST /filter (50%) 3rd-may-2023
                *meal_type (mandatory)
                *location
                cuisine ==> hint ($in)  => from postman you will send [1,2]
                *cost_for_two
                        high -- low
                        low 0  & high 500
                        $gt=500  $lt =1000
                *sort ==> min_price
                        -1 ==> desc Order
                        1 ==> ASC order

                pagination ==> slice of javascript array
                        10 ==> total page ==> 5
                        per page  => 2
                        1 ==> 1,2 
                        2 ==> 3,4
                        3 ==> 5,6
                        4 ==> 7,8
                        5 ==> 9,10

MealType Controller
        **GET /get-meal-type
   

PaymentController (React JS)
        POST /payment
               POST/ save order